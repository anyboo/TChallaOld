// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DeviceInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace VideoServer {

namespace {

const ::google::protobuf::Descriptor* DeviceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DeviceInfo_2eproto() {
  protobuf_AddDesc_DeviceInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DeviceInfo.proto");
  GOOGLE_CHECK(file != NULL);
  DeviceInfo_descriptor_ = file->message_type(0);
  static const int DeviceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, factory_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, szip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, nport_),
  };
  DeviceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfo_descriptor_,
      DeviceInfo::default_instance_,
      DeviceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfo));
  DeviceInfoList_descriptor_ = file->message_type(1);
  static const int DeviceInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, deviceinfos_),
  };
  DeviceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceInfoList_descriptor_,
      DeviceInfoList::default_instance_,
      DeviceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DeviceInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfo_descriptor_, &DeviceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceInfoList_descriptor_, &DeviceInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DeviceInfo_2eproto() {
  delete DeviceInfo::default_instance_;
  delete DeviceInfo_reflection_;
  delete DeviceInfoList::default_instance_;
  delete DeviceInfoList_reflection_;
}

void protobuf_AddDesc_DeviceInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020DeviceInfo.proto\022\013VideoServer\":\n\nDevic"
    "eInfo\022\017\n\007Factory\030\001 \001(\005\022\014\n\004szIP\030\002 \001(\t\022\r\n\005"
    "nPort\030\003 \001(\005\">\n\016DeviceInfoList\022,\n\013deviceI"
    "nfos\030\001 \003(\0132\027.VideoServer.DeviceInfo", 155);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DeviceInfo.proto", &protobuf_RegisterTypes);
  DeviceInfo::default_instance_ = new DeviceInfo();
  DeviceInfoList::default_instance_ = new DeviceInfoList();
  DeviceInfo::default_instance_->InitAsDefaultInstance();
  DeviceInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DeviceInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DeviceInfo_2eproto {
  StaticDescriptorInitializer_DeviceInfo_2eproto() {
    protobuf_AddDesc_DeviceInfo_2eproto();
  }
} static_descriptor_initializer_DeviceInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DeviceInfo::kFactoryFieldNumber;
const int DeviceInfo::kSzIPFieldNumber;
const int DeviceInfo::kNPortFieldNumber;
#endif  // !_MSC_VER

DeviceInfo::DeviceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceInfo::InitAsDefaultInstance() {
}

DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceInfo::SharedCtor() {
  _cached_size_ = 0;
  factory_ = 0;
  szip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nport_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfo::~DeviceInfo() {
  SharedDtor();
}

void DeviceInfo::SharedDtor() {
  if (szip_ != &::google::protobuf::internal::kEmptyString) {
    delete szip_;
  }
  if (this != default_instance_) {
  }
}

void DeviceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfo_descriptor_;
}

const DeviceInfo& DeviceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceInfo_2eproto();
  return *default_instance_;
}

DeviceInfo* DeviceInfo::default_instance_ = NULL;

DeviceInfo* DeviceInfo::New() const {
  return new DeviceInfo;
}

void DeviceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    factory_ = 0;
    if (has_szip()) {
      if (szip_ != &::google::protobuf::internal::kEmptyString) {
        szip_->clear();
      }
    }
    nport_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 Factory = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &factory_)));
          set_has_factory();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_szIP;
        break;
      }

      // optional string szIP = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_szIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_szip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->szip().data(), this->szip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nPort;
        break;
      }

      // optional int32 nPort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nport_)));
          set_has_nport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 Factory = 1;
  if (has_factory()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->factory(), output);
  }

  // optional string szIP = 2;
  if (has_szip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szip().data(), this->szip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->szip(), output);
  }

  // optional int32 nPort = 3;
  if (has_nport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 Factory = 1;
  if (has_factory()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->factory(), target);
  }

  // optional string szIP = 2;
  if (has_szip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->szip().data(), this->szip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->szip(), target);
  }

  // optional int32 nPort = 3;
  if (has_nport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 Factory = 1;
    if (has_factory()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->factory());
    }

    // optional string szIP = 2;
    if (has_szip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->szip());
    }

    // optional int32 nPort = 3;
    if (has_nport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_factory()) {
      set_factory(from.factory());
    }
    if (from.has_szip()) {
      set_szip(from.szip());
    }
    if (from.has_nport()) {
      set_nport(from.nport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {

  return true;
}

void DeviceInfo::Swap(DeviceInfo* other) {
  if (other != this) {
    std::swap(factory_, other->factory_);
    std::swap(szip_, other->szip_);
    std::swap(nport_, other->nport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfo_descriptor_;
  metadata.reflection = DeviceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceInfoList::kDeviceInfosFieldNumber;
#endif  // !_MSC_VER

DeviceInfoList::DeviceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceInfoList::InitAsDefaultInstance() {
}

DeviceInfoList::DeviceInfoList(const DeviceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceInfoList::~DeviceInfoList() {
  SharedDtor();
}

void DeviceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceInfoList_descriptor_;
}

const DeviceInfoList& DeviceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DeviceInfo_2eproto();
  return *default_instance_;
}

DeviceInfoList* DeviceInfoList::default_instance_ = NULL;

DeviceInfoList* DeviceInfoList::New() const {
  return new DeviceInfoList;
}

void DeviceInfoList::Clear() {
  deviceinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .VideoServer.DeviceInfo deviceInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_deviceinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_deviceInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .VideoServer.DeviceInfo deviceInfos = 1;
  for (int i = 0; i < this->deviceinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->deviceinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .VideoServer.DeviceInfo deviceInfos = 1;
  for (int i = 0; i < this->deviceinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->deviceinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .VideoServer.DeviceInfo deviceInfos = 1;
  total_size += 1 * this->deviceinfos_size();
  for (int i = 0; i < this->deviceinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->deviceinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceInfoList::MergeFrom(const DeviceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  deviceinfos_.MergeFrom(from.deviceinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfoList::CopyFrom(const DeviceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfoList::IsInitialized() const {

  return true;
}

void DeviceInfoList::Swap(DeviceInfoList* other) {
  if (other != this) {
    deviceinfos_.Swap(&other->deviceinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceInfoList_descriptor_;
  metadata.reflection = DeviceInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VideoServer

// @@protoc_insertion_point(global_scope)
