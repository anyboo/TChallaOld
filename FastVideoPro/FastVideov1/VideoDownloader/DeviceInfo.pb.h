// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DeviceInfo.proto

#ifndef PROTOBUF_DeviceInfo_2eproto__INCLUDED
#define PROTOBUF_DeviceInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace VideoServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_DeviceInfo_2eproto();
void protobuf_AssignDesc_DeviceInfo_2eproto();
void protobuf_ShutdownFile_DeviceInfo_2eproto();

class DeviceInfo;
class DeviceInfoList;

// ===================================================================

class DeviceInfo : public ::google::protobuf::Message {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();

  DeviceInfo(const DeviceInfo& from);

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();

  void Swap(DeviceInfo* other);

  // implements Message ----------------------------------------------

  DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 Factory = 1;
  inline bool has_factory() const;
  inline void clear_factory();
  static const int kFactoryFieldNumber = 1;
  inline ::google::protobuf::int32 factory() const;
  inline void set_factory(::google::protobuf::int32 value);

  // optional string szIP = 2;
  inline bool has_szip() const;
  inline void clear_szip();
  static const int kSzIPFieldNumber = 2;
  inline const ::std::string& szip() const;
  inline void set_szip(const ::std::string& value);
  inline void set_szip(const char* value);
  inline void set_szip(const char* value, size_t size);
  inline ::std::string* mutable_szip();
  inline ::std::string* release_szip();
  inline void set_allocated_szip(::std::string* szip);

  // optional int32 nPort = 3;
  inline bool has_nport() const;
  inline void clear_nport();
  static const int kNPortFieldNumber = 3;
  inline ::google::protobuf::int32 nport() const;
  inline void set_nport(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:VideoServer.DeviceInfo)
 private:
  inline void set_has_factory();
  inline void clear_has_factory();
  inline void set_has_szip();
  inline void clear_has_szip();
  inline void set_has_nport();
  inline void clear_has_nport();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* szip_;
  ::google::protobuf::int32 factory_;
  ::google::protobuf::int32 nport_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_DeviceInfo_2eproto();
  friend void protobuf_AssignDesc_DeviceInfo_2eproto();
  friend void protobuf_ShutdownFile_DeviceInfo_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeviceInfoList : public ::google::protobuf::Message {
 public:
  DeviceInfoList();
  virtual ~DeviceInfoList();

  DeviceInfoList(const DeviceInfoList& from);

  inline DeviceInfoList& operator=(const DeviceInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfoList& default_instance();

  void Swap(DeviceInfoList* other);

  // implements Message ----------------------------------------------

  DeviceInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfoList& from);
  void MergeFrom(const DeviceInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .VideoServer.DeviceInfo deviceInfos = 1;
  inline int deviceinfos_size() const;
  inline void clear_deviceinfos();
  static const int kDeviceInfosFieldNumber = 1;
  inline const ::VideoServer::DeviceInfo& deviceinfos(int index) const;
  inline ::VideoServer::DeviceInfo* mutable_deviceinfos(int index);
  inline ::VideoServer::DeviceInfo* add_deviceinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::VideoServer::DeviceInfo >&
      deviceinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::VideoServer::DeviceInfo >*
      mutable_deviceinfos();

  // @@protoc_insertion_point(class_scope:VideoServer.DeviceInfoList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::VideoServer::DeviceInfo > deviceinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_DeviceInfo_2eproto();
  friend void protobuf_AssignDesc_DeviceInfo_2eproto();
  friend void protobuf_ShutdownFile_DeviceInfo_2eproto();

  void InitAsDefaultInstance();
  static DeviceInfoList* default_instance_;
};
// ===================================================================


// ===================================================================

// DeviceInfo

// optional int32 Factory = 1;
inline bool DeviceInfo::has_factory() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceInfo::set_has_factory() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceInfo::clear_has_factory() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceInfo::clear_factory() {
  factory_ = 0;
  clear_has_factory();
}
inline ::google::protobuf::int32 DeviceInfo::factory() const {
  return factory_;
}
inline void DeviceInfo::set_factory(::google::protobuf::int32 value) {
  set_has_factory();
  factory_ = value;
}

// optional string szIP = 2;
inline bool DeviceInfo::has_szip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceInfo::set_has_szip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceInfo::clear_has_szip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceInfo::clear_szip() {
  if (szip_ != &::google::protobuf::internal::kEmptyString) {
    szip_->clear();
  }
  clear_has_szip();
}
inline const ::std::string& DeviceInfo::szip() const {
  return *szip_;
}
inline void DeviceInfo::set_szip(const ::std::string& value) {
  set_has_szip();
  if (szip_ == &::google::protobuf::internal::kEmptyString) {
    szip_ = new ::std::string;
  }
  szip_->assign(value);
}
inline void DeviceInfo::set_szip(const char* value) {
  set_has_szip();
  if (szip_ == &::google::protobuf::internal::kEmptyString) {
    szip_ = new ::std::string;
  }
  szip_->assign(value);
}
inline void DeviceInfo::set_szip(const char* value, size_t size) {
  set_has_szip();
  if (szip_ == &::google::protobuf::internal::kEmptyString) {
    szip_ = new ::std::string;
  }
  szip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_szip() {
  set_has_szip();
  if (szip_ == &::google::protobuf::internal::kEmptyString) {
    szip_ = new ::std::string;
  }
  return szip_;
}
inline ::std::string* DeviceInfo::release_szip() {
  clear_has_szip();
  if (szip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = szip_;
    szip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void DeviceInfo::set_allocated_szip(::std::string* szip) {
  if (szip_ != &::google::protobuf::internal::kEmptyString) {
    delete szip_;
  }
  if (szip) {
    set_has_szip();
    szip_ = szip;
  } else {
    clear_has_szip();
    szip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 nPort = 3;
inline bool DeviceInfo::has_nport() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceInfo::set_has_nport() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceInfo::clear_has_nport() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceInfo::clear_nport() {
  nport_ = 0;
  clear_has_nport();
}
inline ::google::protobuf::int32 DeviceInfo::nport() const {
  return nport_;
}
inline void DeviceInfo::set_nport(::google::protobuf::int32 value) {
  set_has_nport();
  nport_ = value;
}

// -------------------------------------------------------------------

// DeviceInfoList

// repeated .VideoServer.DeviceInfo deviceInfos = 1;
inline int DeviceInfoList::deviceinfos_size() const {
  return deviceinfos_.size();
}
inline void DeviceInfoList::clear_deviceinfos() {
  deviceinfos_.Clear();
}
inline const ::VideoServer::DeviceInfo& DeviceInfoList::deviceinfos(int index) const {
  return deviceinfos_.Get(index);
}
inline ::VideoServer::DeviceInfo* DeviceInfoList::mutable_deviceinfos(int index) {
  return deviceinfos_.Mutable(index);
}
inline ::VideoServer::DeviceInfo* DeviceInfoList::add_deviceinfos() {
  return deviceinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::VideoServer::DeviceInfo >&
DeviceInfoList::deviceinfos() const {
  return deviceinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::VideoServer::DeviceInfo >*
DeviceInfoList::mutable_deviceinfos() {
  return &deviceinfos_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace VideoServer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_DeviceInfo_2eproto__INCLUDED
